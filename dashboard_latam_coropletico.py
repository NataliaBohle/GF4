# Reorganizado para incluir el nuevo sistema de navegaci√≥n con fichas t√©cnicas
import streamlit as st
import pandas as pd
import plotly.express as px

@st.cache_data
def load_data():
    return pd.read_csv("data_proyectos_10porpais.csv")

df = load_data()

# Mapeo para nombre en mapa
df["Nombre Pa√≠s"] = df["Pa√≠s"].map({
    "üá®üá± Chile": "Chile",
    "üáµüá™ Per√∫": "Peru",
    "üá¶üá∑ Argentina": "Argentina",
    "üáµüáæ Paraguay": "Paraguay",
    "üá∫üáæ Uruguay": "Uruguay",
    "üáßüá∑ Brasil": "Brazil",
    "üá®üá¥ Colombia": "Colombia",
    "üá∞üá∑ Costa Rica": "Costa Rica",
    "üá™üá® Ecuador": "Ecuador",
    "üá≤üáΩ M√©xico": "Mexico"
})

# --- SIDEBAR ---
st.sidebar.title("üìö Navegaci√≥n")
seccion = st.sidebar.radio("Selecciona vista:", ["Dashboard", "Ficha T√©cnica"])

if seccion == "Dashboard":
    st.sidebar.markdown("### Filtros")
    paises = st.sidebar.multiselect("üåé Pa√≠s", df["Pa√≠s"].unique())
    tipos = st.sidebar.multiselect("‚ö° Tipo de Proyecto", df["Tipo de Proyecto"].unique())
    rango_ingreso = st.sidebar.slider("üóïÔ∏è A√±o de Ingreso", int(df["A√±o Ingreso Evaluaci√≥n"].min()), int(df["A√±o Ingreso Evaluaci√≥n"].max()), (2015, 2023))
    rango_aprobacion = st.sidebar.slider("üóïÔ∏è A√±o de Aprobaci√≥n", int(df["A√±o Aprobaci√≥n Proyecto"].min()), int(df["A√±o Aprobaci√≥n Proyecto"].max()), (2016, 2024))

    # Filtro
    df_filtrado = df.copy()
    if paises:
        df_filtrado = df_filtrado[df_filtrado["Pa√≠s"].isin(paises)]
    if tipos:
        df_filtrado = df_filtrado[df_filtrado["Tipo de Proyecto"].isin(tipos)]
    df_filtrado = df_filtrado[
        (df_filtrado["A√±o Ingreso Evaluaci√≥n"] >= rango_ingreso[0]) & 
        (df_filtrado["A√±o Ingreso Evaluaci√≥n"] <= rango_ingreso[1]) & 
        (df_filtrado["A√±o Aprobaci√≥n Proyecto"] >= rango_aprobacion[0]) & 
        (df_filtrado["A√±o Aprobaci√≥n Proyecto"] <= rango_aprobacion[1])
    ]

elif seccion == "Ficha T√©cnica":
    pais_ficha = st.sidebar.selectbox("üìÑ Elige un pa√≠s", [
        "Chile", "Per√∫", "Argentina", "Paraguay", "Uruguay",
        "Brasil", "Colombia", "Costa Rica", "Ecuador", "M√©xico"
    ])

# --- P√ÅGINA PRINCIPAL ---
if seccion == "Dashboard":
    st.title("üåé Transici√≥n Energ√©tica Justa en Am√©rica Latina y el Caribe")
    st.markdown("""
    <div style="display: flex; gap: 10px; align-items: center; flex-wrap: wrap;">
      <img src="https://flagcdn.com/w40/cl.png" title="Chile" width="30">
      <img src="https://flagcdn.com/w40/pe.png" title="Per√∫" width="30">
      <img src="https://flagcdn.com/w40/ar.png" title="Argentina" width="30">
      <img src="https://flagcdn.com/w40/py.png" title="Paraguay" width="30">
      <img src="https://flagcdn.com/w40/uy.png" title="Uruguay" width="30">
      <img src="https://flagcdn.com/w40/br.png" title="Brasil" width="30">
      <img src="https://flagcdn.com/w40/co.png" title="Colombia" width="30">
      <img src="https://flagcdn.com/w40/cr.png" title="Costa Rica" width="30">
      <img src="https://flagcdn.com/w40/ec.png" title="Ecuador" width="30">
      <img src="https://flagcdn.com/w40/mx.png" title="M√©xico" width="30">
    </div>
    """, unsafe_allow_html=True)
    st.subheader("Grupo Focal 4. REDALSEIA 2025")
    
    st.markdown("""
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sodales mi non enim facilisis, 
    vitae lacinia lorem euismod. In volutpat porta sapien, condimentum consectetur ante varius in. Cras ac nulla 
    sed nibh sodales pharetra. Quisque ultrices porttitor ex et lacinia. Nulla tempus metus sed bibendum tincidunt. 
    Aliquam lacinia scelerisque facilisis. Vivamus vulputate molestie velit, nec blandit est vehicula a. Ut bibendum 
    augue ut dui sollicitudin, tristique luctus ipsum mollis. Vivamus nec tellus nisi. Quisque sed rutrum quam. 
    Proin sit amet tristique lacus. Mauris aliquet molestie velit id egestas. Donec sed lectus eget mauris varius 
    sodales. Cras dui lacus, pulvinar id.
    """)
    
    st.markdown("<div style='margin-top:30px;'></div>", unsafe_allow_html=True)
    
    
    st.markdown(" ")  # o st.text(" ")
    # KPIs
    st.subheader("üî¢ Indicadores Principales*")
    st.markdown("""
    * Estos indicadores no son representativos de la totalidad de proyectos de cada pa√≠s. Corresponden a los
    proyectos enviados por cada pa√≠s para realizar el panel de datos y el an√°lisis objetivo del grupo focal.
    """)
    col1, col2, col3 = st.columns(3)
    col1.metric("Total Proyectos", len(df_filtrado))
    col2.metric("Capacidad Total (MW)", round(df_filtrado["Energ√≠a Generada (MW)"].sum(), 1))
    col3.metric("Prom. Energ√≠a por Proyecto", round(df_filtrado["Energ√≠a Generada (MW)"].mean(), 1))
    
    
    # MAPA COMPLETO LATAM
    st.subheader("üó∫Ô∏è Generaci√≥n Total por Pa√≠s (MW)")
    # Lista completa de pa√≠ses latinoamericanos
    # Lista completa de pa√≠ses latinoamericanos
    latam_paises = [
        "Argentina", "Belize", "Bolivia", "Brazil", "Chile", "Colombia", "Costa Rica",
        "Cuba", "Dominican Republic", "Ecuador", "El Salvador", "Guatemala", "Honduras",
        "Mexico", "Nicaragua", "Panama", "Paraguay", "Peru", "Uruguay", "Venezuela",
        "Puerto Rico", "Haiti", "Jamaica", "Trinidad and Tobago", "Guyana", "Suriname",
        "French Guiana"
    ]
    
    # Preparar DataFrame de mapa
    df_base = pd.DataFrame({"Nombre Pa√≠s": latam_paises})
    df_map = df_base.merge(
        df_filtrado.groupby("Nombre Pa√≠s")["Energ√≠a Generada (MW)"].sum().reset_index(),
        on="Nombre Pa√≠s", how="left"
    )
    
    # Hover info
    df_map["info"] = df_map["Energ√≠a Generada (MW)"].apply(
        lambda x: "Pa√≠s no participa de REDLASEIA" if pd.isna(x) else f"{x:.1f} MW"
    )
    
    # Colorear gris sin datos
    df_map["Energ√≠a Generada (MW)"] = df_map["Energ√≠a Generada (MW)"].fillna(0)
    
    # Mapa
    fig_map = px.choropleth(
        df_map,
        locations="Nombre Pa√≠s",
        locationmode="country names",
        color="Energ√≠a Generada (MW)",
        hover_name="Nombre Pa√≠s",
        hover_data={"info": True, "Energ√≠a Generada (MW)": False, "Nombre Pa√≠s": False},
        color_continuous_scale=[
            (0.0, "#d3d3d3"),
            (0.00001, "#440154"),
            (0.5, "#21908C"),
            (1.0, "#FDE725")
        ],
        range_color=(0.00001, df_map["Energ√≠a Generada (MW)"].max()),
        title="Generaci√≥n Total de Energ√≠a por Pa√≠s (MW)",
        scope="world"
    )
    
    fig_map.update_geos(
        fitbounds="locations",
        visible=False,
        lataxis_range=[-60, 33],
        lonaxis_range=[-120, -30]
    )
    fig_map.update_traces(marker_line_color="black", marker_line_width=0.5)
    
    st.plotly_chart(fig_map, use_container_width=True)
    
    
    
    # GR√ÅFICOS
    st.subheader("üìä An√°lisis de Proyectos")
    tab1, tab2, tab3 = st.tabs(["Tipo de Proyecto", "Impactos Ambientales", "Medidas Aplicadas"])
    
    with tab1:
        st.markdown("### Tipos de Proyecto (con √≠conos)")
    
        # Contar y mapear √≠conos
        tipo_counts = df_filtrado["Tipo de Proyecto"].value_counts().reset_index()
        tipo_counts.columns = ["Tipo", "Cantidad"]
    
        iconos = {
            "Solar": "Solar ‚òÄÔ∏è",
            "E√≥lico": "E√≥lica üåÄ",
            "Mini Hidroel√©ctrica": "Mini Hidroüíß",
            "Hidr√≥geno verde": "H2Vüß™",
            "Biomasa": "Biomasaüåø"
        }
    
        tipo_counts["√çcono"] = tipo_counts["Tipo"].map(iconos)
    
        # Gr√°fico de barras horizontales
        fig_barh = px.bar(
            tipo_counts.sort_values("Cantidad"),
            x="Cantidad",
            y="√çcono",
            orientation="h",
            labels={"Cantidad": "Cantidad de proyectos", "√çcono": "Tipo"},
            title="Cantidad de proyectos por tipo"
        )
    
        st.plotly_chart(fig_barh, use_container_width=True)
    
    
    
    with tab2:
        all_impactos = df_filtrado["Impactos Ambientales"].str.split(", ").explode()
        df_impactos = all_impactos.value_counts().reset_index()
        df_impactos.columns = ["Impacto", "Frecuencia"]
        fig2 = px.histogram(df_impactos, x="Impacto", y="Frecuencia",
                            labels={"Impacto": "Impacto Ambiental", "Frecuencia": "Cantidad"},
                            title="Impactos Ambientales m√°s Frecuentes")
        st.plotly_chart(fig2, use_container_width=True)
    
    with tab3:
        st.markdown("#### üõ°Ô∏è Medidas de Mitigaci√≥n")
        mit = df_filtrado["Medidas de Mitigaci√≥n"].str.split(", ").explode()
        df_mit = mit.value_counts()
        fig3a = px.bar(
            x=df_mit.index,
            y=df_mit.values,
            labels={"x": "Medida", "y": "Frecuencia"},
            title="Medidas de Mitigaci√≥n"
        )
        st.plotly_chart(fig3a, use_container_width=True)
    
        st.markdown("#### ‚ôªÔ∏è Medidas de Compensaci√≥n")
        comp = df_filtrado["Medidas de Compensaci√≥n"].str.split(", ").explode()
        df_comp = comp.value_counts()
        fig3b = px.bar(
            x=df_comp.index,
            y=df_comp.values,
            labels={"x": "Medida", "y": "Frecuencia"},
            title="Medidas de Compensaci√≥n"
        )
        st.plotly_chart(fig3b, use_container_width=True)
    
        st.markdown("#### üß± Medidas de Reparaci√≥n")
        rep = df_filtrado["Medidas de Reparaci√≥n"].str.split(", ").explode()
        df_rep = rep.value_counts()
        fig3c = px.bar(
            x=df_rep.index,
            y=df_rep.values,
            labels={"x": "Medida", "y": "Frecuencia"},
            title="Medidas de Reparaci√≥n"
        )
        st.plotly_chart(fig3c, use_container_width=True)
    
    # GR√ÅFICO DE L√çNEAS POR A√ëO
    st.subheader("üìà Evoluci√≥n Anual de Energ√≠a Generada por Proyectos")
    
    df_linea = df_filtrado.copy()
    
    # Agrupar energ√≠a por a√±o de ingreso y aprobaci√≥n
    energia_ingreso = df_linea.groupby("A√±o Ingreso Evaluaci√≥n")["Energ√≠a Generada (MW)"].sum().reset_index()
    energia_aprobacion = df_linea.groupby("A√±o Aprobaci√≥n Proyecto")["Energ√≠a Generada (MW)"].sum().reset_index()
    
    energia_ingreso["Tipo"] = "Ingreso"
    energia_aprobacion["Tipo"] = "Aprobaci√≥n"
    energia_ingreso = energia_ingreso.rename(columns={"A√±o Ingreso Evaluaci√≥n": "A√±o"})
    energia_aprobacion = energia_aprobacion.rename(columns={"A√±o Aprobaci√≥n Proyecto": "A√±o"})
    
    # Combinar ambos
    df_tendencia = pd.concat([energia_ingreso, energia_aprobacion])
    
    fig_linea = px.line(
        df_tendencia,
        x="A√±o",
        y="Energ√≠a Generada (MW)",
        color="Tipo",
        markers=True,
        labels={"Energ√≠a Generada (MW)": "MW generados"},
        title="Energ√≠a generada por a√±o de ingreso y aprobaci√≥n"
    )
    
    st.plotly_chart(fig_linea, use_container_width=True)
    
    st.subheader("üìä Tiempo entre ingreso y aprobaci√≥n")
    
    df_scatter = df_filtrado.copy()
    df_scatter["A√±os entre ingreso y aprobaci√≥n"] = df_scatter["A√±o Aprobaci√≥n Proyecto"] - df_scatter["A√±o Ingreso Evaluaci√≥n"]
    
    fig_scatter = px.scatter(
        df_scatter,
        x="A√±o Ingreso Evaluaci√≥n",
        y="A√±os entre ingreso y aprobaci√≥n",
        color="Tipo de Proyecto",
        size="Energ√≠a Generada (MW)",
        hover_name="Proyecto",
        title="Retraso en aprobaci√≥n por a√±o de ingreso"
    )
    st.plotly_chart(fig_scatter, use_container_width=True)
    
    #tipo/pais
    # Paleta m√°s arm√≥nica por tipo
    color_map = {
        "Solar": "#F4D06F",        # amarillo suave
        "E√≥lico": "#90BEDE",       # celeste claro
        "Mini Hidroel√©ctrica": "#B5EAD7",  # verde agua
        "Hidr√≥geno Verde": "#FFDAC1",      # salm√≥n suave
        "Biomasa": "#C7CEEA"       # lavanda claro
    }
    
    fig_treemap = px.treemap(
        df_filtrado,
        path=["Pa√≠s", "Tipo de Proyecto"],
        values="Energ√≠a Generada (MW)",
        color="Tipo de Proyecto",
        color_discrete_map=color_map,
        title="Participaci√≥n de tipos de proyecto por pa√≠s (en MW)"
    )
    st.plotly_chart(fig_treemap, use_container_width=True)
    
    
    st.subheader("üî• Impactos Ambientales por Tipo de Proyecto (Heatmap)")
    
    # Separar m√∫ltiples impactos
    df_heat = df_filtrado.copy()
    df_heat = df_heat.assign(Impactos=df_heat["Impactos Ambientales"].str.split(", "))
    df_heat = df_heat.explode("Impactos")
    df_heat["Impactos"] = df_heat["Impactos"].str.strip()
    
    # Agrupar
    tabla_heat = df_heat.groupby(["Tipo de Proyecto", "Impactos"]).size().reset_index(name="Frecuencia")
    
    # Solo mostrar los 10 impactos m√°s comunes para claridad
    top_impactos = tabla_heat.groupby("Impactos")["Frecuencia"].sum().nlargest(10).index
    tabla_heat = tabla_heat[tabla_heat["Impactos"].isin(top_impactos)]
    
    # Gr√°fico
    fig_heat = px.density_heatmap(
        tabla_heat,
        x="Impactos",
        y="Tipo de Proyecto",
        z="Frecuencia",
        color_continuous_scale="YlOrBr",
        title="Top 10 Impactos Ambientales por Tipo de Proyecto"
    )
    fig_heat.update_layout(xaxis_tickangle=45)
    st.plotly_chart(fig_heat, use_container_width=True)
    
    
    # TABLA DETALLE
    st.subheader("üìã Detalle de Proyectos")
    st.dataframe(df_filtrado.reset_index(drop=True), use_container_width=True)
elif seccion == "Ficha T√©cnica":
    if pais_ficha == "Chile":
        st.title("üá®üá± Ficha T√©cnica - Chile")
        st.subheader("Perfil Energ√©tico")
        st.markdown("""
        - **Matriz renovable:** 62% (2023)
        - **Capacidad solar:** 6.000 MW
        - **Capacidad e√≥lica:** 4.000 MW
        - **Proyectos H2V en curso:** 7
        - **Desaf√≠os:** escasez h√≠drica en zonas cr√≠ticas, conexi√≥n SIC/SING
        """)
        st.subheader("Principales Proyectos")
        st.markdown("""
        - Parque Solar Atacama (250 MW)
        - Parque E√≥lico Llanos del Viento (180 MW)
        - Proyecto H2 Magallanes (60 MW electr√≥lisis)
        """)
    else:
        st.title(f"Ficha T√©cnica - {pais_ficha}")
        st.info("Esta ficha t√©cnica est√° en construcci√≥n. Pronto estar√° disponible.")
